/* tslint:disable */
/* eslint-disable */
/**
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddLabelToBadgeDto } from '../models';
import { BadgeResponseDto } from '../models';
import { BadgesResponseDto } from '../models';
import { CreateBadgeDto } from '../models';
import { VerifiyBadgeFileReponseDto } from '../models';
import { VerifiyBadgeReponseDto } from '../models';
import { VerifyBadgeDto } from '../models';
/**
 * BadgesApi - axios parameter creator
 * @export
 */
export const BadgesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerAddLabel: async (body: AddLabelToBadgeDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerAddLabel.');
            }
            const localVarPath = `/api/v1/badges/{id}/label`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerCreate: async (body: CreateBadgeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerCreate.');
            }
            const localVarPath = `/api/v1/badges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerDownload: async (id: string, vpInfoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerDownload.');
            }
            // verify required parameter 'vpInfoId' is not null or undefined
            if (vpInfoId === null || vpInfoId === undefined) {
                throw new RequiredError('vpInfoId','Required parameter vpInfoId was null or undefined when calling badgesControllerDownload.');
            }
            const localVarPath = `/api/v1/badges/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (vpInfoId !== undefined) {
                localVarQueryParameter['vpInfoId'] = vpInfoId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFileVerifyForm: async (file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling badgesControllerFileVerifyForm.');
            }
            const localVarPath = `/api/v1/badges/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindAll: async (page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/badges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerFindOne.');
            }
            const localVarPath = `/api/v1/badges/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerVerify: async (body: VerifyBadgeDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerVerify.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerVerify.');
            }
            const localVarPath = `/api/v1/badges/{id}/verify`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BadgesApi - functional programming interface
 * @export
 */
export const BadgesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BadgeResponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerAddLabel(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerCreate(body: CreateBadgeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BadgeResponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerDownload(id: string, vpInfoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerDownload(id, vpInfoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFileVerifyForm(file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VerifiyBadgeFileReponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerFileVerifyForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BadgesResponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BadgeResponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VerifiyBadgeReponseDto>>> {
            const localVarAxiosArgs = await BadgesApiAxiosParamCreator(configuration).badgesControllerVerify(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BadgesApi - factory interface
 * @export
 */
export const BadgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BadgeResponseDto>> {
            return BadgesApiFp(configuration).badgesControllerAddLabel(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerCreate(body: CreateBadgeDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BadgeResponseDto>> {
            return BadgesApiFp(configuration).badgesControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerDownload(id: string, vpInfoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return BadgesApiFp(configuration).badgesControllerDownload(id, vpInfoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFileVerifyForm(file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<VerifiyBadgeFileReponseDto>> {
            return BadgesApiFp(configuration).badgesControllerFileVerifyForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<BadgesResponseDto>> {
            return BadgesApiFp(configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BadgeResponseDto>> {
            return BadgesApiFp(configuration).badgesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<VerifiyBadgeReponseDto>> {
            return BadgesApiFp(configuration).badgesControllerVerify(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BadgesApi - object-oriented interface
 * @export
 * @class BadgesApi
 * @extends {BaseAPI}
 */
export class BadgesApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
     * @summary Badgeへのラベル追加
     * @param {AddLabelToBadgeDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BadgeResponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerAddLabel(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 新規バッジを発行します。
     * @summary 新規バッジ発行
     * @param {CreateBadgeDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerCreate(body: CreateBadgeDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BadgeResponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
     * @summary バッジダウンロード
     * @param {string} id 
     * @param {string} vpInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerDownload(id: string, vpInfoId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return BadgesApiFp(this.configuration).badgesControllerDownload(id, vpInfoId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary バッジファイル検証
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerFileVerifyForm(file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<VerifiyBadgeFileReponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerFileVerifyForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * アプリケーションが管理するバッジ情報を一覧として値を返します。
     * @summary バッジ一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
     * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
     * @param {string} [description] (任意) 
     * @param {number} [status] (任意) 例: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<BadgesResponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
     * @summary バッジ詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerFindOne(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BadgeResponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * バッジのVC/VPの検証を実行します。
     * @summary バッジ検証
     * @param {VerifyBadgeDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public async badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<VerifiyBadgeReponseDto>> {
        return BadgesApiFp(this.configuration).badgesControllerVerify(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
