/* tslint:disable */
/* eslint-disable */
/**
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConnectDidInfosDto } from '../models';
import { ConnectUsersDto } from '../models';
import { ConnectVcInfosDto } from '../models';
import { ConnectVcSchemasDto } from '../models';
import { ConnectVpInfosDto } from '../models';
import { CreateGroupDto } from '../models';
import { GroupResponseDto } from '../models';
import { GroupsResponseDto } from '../models';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectDidInfos: async (body: ConnectDidInfosDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectDidInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectDidInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/did-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectUsers: async (body: ConnectUsersDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectUsers.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectUsers.');
            }
            const localVarPath = `/api/v1/groups/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcInfos: async (body: ConnectVcInfosDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVcInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVcInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcSchema: async (body: ConnectVcSchemasDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVcSchema.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVcSchema.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-schemas`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVpInfos: async (body: ConnectVpInfosDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVpInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVpInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/vp-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerCreate: async (body: CreateGroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerCreate.');
            }
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectDidInfo: async (id: string, didInfoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectDidInfo.');
            }
            // verify required parameter 'didInfoId' is not null or undefined
            if (didInfoId === null || didInfoId === undefined) {
                throw new RequiredError('didInfoId','Required parameter didInfoId was null or undefined when calling groupsControllerDisconnectDidInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/did-info/{did_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"did_info_id"}}`, encodeURIComponent(String(didInfoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectUser: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling groupsControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/groups/{id}/user/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcInfo: async (id: string, vcInfoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVcInfo.');
            }
            // verify required parameter 'vcInfoId' is not null or undefined
            if (vcInfoId === null || vcInfoId === undefined) {
                throw new RequiredError('vcInfoId','Required parameter vcInfoId was null or undefined when calling groupsControllerDisconnectVcInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-info/{vc_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vc_info_id"}}`, encodeURIComponent(String(vcInfoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcSchema: async (id: string, vcSchemaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVcSchema.');
            }
            // verify required parameter 'vcSchemaId' is not null or undefined
            if (vcSchemaId === null || vcSchemaId === undefined) {
                throw new RequiredError('vcSchemaId','Required parameter vcSchemaId was null or undefined when calling groupsControllerDisconnectVcSchema.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-schema/{vc_schema_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vc_schema_id"}}`, encodeURIComponent(String(vcSchemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVpInfo: async (id: string, vpInfoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVpInfo.');
            }
            // verify required parameter 'vpInfoId' is not null or undefined
            if (vpInfoId === null || vpInfoId === undefined) {
                throw new RequiredError('vpInfoId','Required parameter vpInfoId was null or undefined when calling groupsControllerDisconnectVpInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/vp-info/{vp_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vp_info_id"}}`, encodeURIComponent(String(vpInfoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindAll: async (page?: number, limit?: number, name?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerFindOne.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerRemove.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerUpdate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerUpdate.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerConnectDidInfos(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerConnectUsers(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerConnectVcInfos(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerConnectVcSchema(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerConnectVpInfos(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerCreate(body: CreateGroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectUser(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerDisconnectUser(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupsResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerFindAll(page, limit, name, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerUpdate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupResponseDto>>> {
            const localVarAxiosArgs = await GroupsApiAxiosParamCreator(configuration).groupsControllerUpdate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerConnectDidInfos(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerConnectUsers(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerConnectVcInfos(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerConnectVcSchema(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerConnectVpInfos(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerCreate(body: CreateGroupDto, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options).then((request) => request(axios, basePath));
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectUser(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerDisconnectUser(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options).then((request) => request(axios, basePath));
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options).then((request) => request(axios, basePath));
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options).then((request) => request(axios, basePath));
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupsResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerFindAll(page, limit, name, status, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupsApiFp(configuration).groupsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsControllerUpdate(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupResponseDto>> {
            return GroupsApiFp(configuration).groupsControllerUpdate(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * グループにDID情報を紐付けます。
     * @summary グループへのDID情報紐付け
     * @param {ConnectDidInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerConnectDidInfos(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
     * @summary グループへのユーザーアカウント紐付け
     * @param {ConnectUsersDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerConnectUsers(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループにVC情報を紐付けます。
     * @summary グループへのVC情報紐付け
     * @param {ConnectVcInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerConnectVcInfos(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループにVCスキーマを紐付けます。
     * @summary グループへのVCスキーマ紐付け
     * @param {ConnectVcSchemasDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerConnectVcSchema(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループにVP情報を紐付けます。
     * @summary グループへのVP情報紐付け
     * @param {ConnectVpInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerConnectVpInfos(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループ作成に成功しました。
     * @summary グループ作成
     * @param {CreateGroupDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerCreate(body: CreateGroupDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループに紐付いたDID情報の紐付けを解除します。
     * @summary グループのDID情報紐付け解除
     * @param {string} id 
     * @param {string} didInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループに紐付いたユーザーアカウントの紐付けを解除します。
     * @summary グループのユーザーアカウント紐付け解除
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerDisconnectUser(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectUser(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループに紐付いたVC情報の紐付けを解除します。
     * @summary グループのVC情報紐付け解除
     * @param {string} id 
     * @param {string} vcInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループに紐付いたVCスキーマの紐付けを解除します。
     * @summary グループのVCスキーマ紐付け解除
     * @param {string} id 
     * @param {string} vcSchemaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループに紐付いたVP情報の紐付けを解除します。
     * @summary グループのVP情報紐付け解除
     * @param {string} id 
     * @param {string} vpInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * グループを一覧として値を返します。
     * @summary グループ一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
     * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupsResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerFindAll(page, limit, name, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
     * @summary グループ詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerFindOne(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のグループを停止します。
     * @summary グループ停止
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerRemove(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupsApiFp(this.configuration).groupsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のグループ情報を更新します。
     * @summary グループ更新
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public async groupsControllerUpdate(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupResponseDto>> {
        return GroupsApiFp(this.configuration).groupsControllerUpdate(id, options).then((request) => request(this.axios, this.basePath));
    }
}
