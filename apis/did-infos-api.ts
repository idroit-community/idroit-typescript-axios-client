/* tslint:disable */
/* eslint-disable */
/**
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddLabelToDidInfoDto } from '../models';
import { CreateDidDto } from '../models';
import { DidInfoResponseDto } from '../models';
import { DidInfosResponseDto } from '../models';
import { RegisterDidDto } from '../models';
import { ResolveDidDto } from '../models';
import { ResolveDidResponseDto } from '../models';
/**
 * DidInfosApi - axios parameter creator
 * @export
 */
export const DidInfosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerAddLabel: async (body: AddLabelToDidInfoDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerAddLabel.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerConnectUser: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerConnectUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling didInfosControllerConnectUser.');
            }
            const localVarPath = `/api/v1/did-infos/{id}/user/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerCreate: async (body: CreateDidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerCreate.');
            }
            const localVarPath = `/api/v1/did-infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerDisconnectUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/did-infos/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindAll: async (page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/did-infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (did !== undefined) {
                localVarQueryParameter['did'] = did;
            }

            if (manageUuid !== undefined) {
                localVarQueryParameter['manageUuid'] = manageUuid;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (method !== undefined) {
                localVarQueryParameter['method'] = method;
            }

            if (existPrivateKey !== undefined) {
                localVarQueryParameter['existPrivateKey'] = existPrivateKey;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (domainName !== undefined) {
                localVarQueryParameter['domainName'] = domainName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerFindOne.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRegister: async (body: RegisterDidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerRegister.');
            }
            const localVarPath = `/api/v1/did-infos/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerRemove.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerResolve: async (body: ResolveDidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerResolve.');
            }
            const localVarPath = `/api/v1/did-infos/resolver`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DidInfosApi - functional programming interface
 * @export
 */
export const DidInfosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DidInfoResponseDto>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerAddLabel(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerConnectUser(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DidInfoResponseDto>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerConnectUser(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerCreate(body: CreateDidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerDisconnectUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerDisconnectUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DidInfosResponseDto>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DidInfoResponseDto>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerRegister(body: RegisterDidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerRegister(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerResolve(body: ResolveDidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResolveDidResponseDto>>> {
            const localVarAxiosArgs = await DidInfosApiAxiosParamCreator(configuration).didInfosControllerResolve(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DidInfosApi - factory interface
 * @export
 */
export const DidInfosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DidInfoResponseDto>> {
            return DidInfosApiFp(configuration).didInfosControllerAddLabel(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerConnectUser(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DidInfoResponseDto>> {
            return DidInfosApiFp(configuration).didInfosControllerConnectUser(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerCreate(body: CreateDidDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DidInfosApiFp(configuration).didInfosControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerDisconnectUser(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DidInfosApiFp(configuration).didInfosControllerDisconnectUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DidInfosResponseDto>> {
            return DidInfosApiFp(configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DidInfoResponseDto>> {
            return DidInfosApiFp(configuration).didInfosControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerRegister(body: RegisterDidDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DidInfosApiFp(configuration).didInfosControllerRegister(body, options).then((request) => request(axios, basePath));
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerRemove(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DidInfosApiFp(configuration).didInfosControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async didInfosControllerResolve(body: ResolveDidDto, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolveDidResponseDto>> {
            return DidInfosApiFp(configuration).didInfosControllerResolve(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DidInfosApi - object-oriented interface
 * @export
 * @class DidInfosApi
 * @extends {BaseAPI}
 */
export class DidInfosApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
     * @summary DID情報へのラベル追加
     * @param {AddLabelToDidInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DidInfoResponseDto>> {
        return DidInfosApiFp(this.configuration).didInfosControllerAddLabel(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @summary DID情報へのクライアントアカウント紐付け
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerConnectUser(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DidInfoResponseDto>> {
        return DidInfosApiFp(this.configuration).didInfosControllerConnectUser(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 新規DIDを生成します。
     * @summary 新規DID生成
     * @param {CreateDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerCreate(body: CreateDidDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DidInfosApiFp(this.configuration).didInfosControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @summary DID情報のクライアントアカウント紐付け解除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerDisconnectUser(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DidInfosApiFp(this.configuration).didInfosControllerDisconnectUser(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * アプリケーションが管理するDID情報を一覧として値を返します。
     * @summary DID情報一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
     * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
     * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
     * @param {string} [method] (任意) 例: \&quot;did:key
     * @param {boolean} [existPrivateKey] (任意) 例: true
     * @param {string} [description] (任意) 
     * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DidInfosResponseDto>> {
        return DidInfosApiFp(this.configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
     * @summary DID情報詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerFindOne(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DidInfoResponseDto>> {
        return DidInfosApiFp(this.configuration).didInfosControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 外部で生成されたDIDを本アプリケーションに取り込みます。
     * @summary 既存DID登録
     * @param {RegisterDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerRegister(body: RegisterDidDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DidInfosApiFp(this.configuration).didInfosControllerRegister(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * リクエストパラメータのidで指定された単一のDID情報を削除します。
     * @summary DID情報削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerRemove(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DidInfosApiFp(this.configuration).didInfosControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
     * @summary DID解決
     * @param {ResolveDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public async didInfosControllerResolve(body: ResolveDidDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResolveDidResponseDto>> {
        return DidInfosApiFp(this.configuration).didInfosControllerResolve(body, options).then((request) => request(this.axios, this.basePath));
    }
}
